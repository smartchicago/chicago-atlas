- content_for :javascripts do
  = javascript_include_tag "leaflet"
  = javascript_include_tag "leaflet.label"
  = javascript_include_tag "jquery-ui-slider.min"
  = javascript_include_tag "jquery.address.min"
  = javascript_include_tag "jenks"

  :javascript
    $(window).resize(function () {
      var h = $(window).height(),
        offsetTop = 70; // Calculate the top offset

      $('#map').css('height', (h - offsetTop));
    }).resize();

    var map = L.map('map').setView([41.8781136, -87.66677856445312], 11);

    var cloudmade = L.tileLayer('http://{s}.tile.cloudmade.com/{key}/{styleId}/256/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade',
        key: 'BC9A493B41014CAABB98F0471D759707',
        styleId: 22677
    }).addTo(map);
    map.attributionControl.setPrefix('');

    var geojsonFeature = #{@display_geojson};
    var geojson;
    var allLayers = [];

    // control that shows info on hover
    var info = L.control();

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div;
    };

    function resetHighlight(e) {
        geojson.resetStyle(e.target);
    }

    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 5,
            color: '#666',
            dashArray: '',
            fillOpacity: 0.7
        });

        if (!L.Browser.ie && !L.Browser.opera) {
            layer.bringToFront();
        }
    }

  - if @landing
    :javascript
        geojson = L.geoJson(geojsonFeature, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);

        for(layer in allLayers){
            var props = allLayers[layer].feature.properties;
            allLayers[layer].bindLabel( '<h4>' + props.name + '</h4>');
        }

        function style(feature) {
            return {
                fillColor: '#6BAED6',
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
            };
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: linkToDetail
            });
            allLayers.push(layer);
        }

        function linkToDetail(e) {
            window.location = '/place/' + e.target.feature.properties.slug;
        }

  - else
    :javascript
        var jenks_cutoffs = jenks(#{@current_statistics}, 4);
        jenks_cutoffs[0] = 0; // ensure the bottom value is 0
        jenks_cutoffs.pop(); // last item is the max value, so dont use it

        // get color depending on condition_title
        function getColor(d) {
            return  d >= jenks_cutoffs[3] ? '#08519C' : 
                    d >= jenks_cutoffs[2] ? '#3182BD' : 
                    d >= jenks_cutoffs[1] ? '#6BAED6' : 
                    d >= jenks_cutoffs[0] ? '#BDD7E7' :  
                                            '#EFF3FF';
        }

        function style(feature) {
            return {
                fillColor: getColor(feature.properties.condition_value[active_year]),
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
            };
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: linkToDetail
            });
            allLayers.push(layer);
        }

        function linkToDetail(e) {
            window.location = '/place/' + e.target.feature.properties.slug + '/#{@current_dataset.slug}';
        }

        geojson = L.geoJson(geojsonFeature, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);
        
     
        function update_year(year){
            active_year = year;
            $.address.parameter('year', active_year);
            var year_range = allLayers[0].feature.properties.condition_year_range;
            if (year_range != '')
                $("#year_label").text(year_range);
            else
        	    $("#year_label").text(year);

            for(layer in allLayers){
                var props = allLayers[layer].feature.properties;
                var percentSuffix = '';
                if (props.stat_type.indexOf("percent") !== -1) percentSuffix = '%';
                allLayers[layer].bindLabel( '<h4>' + props.name + '</h4>' + props.condition_title + ': ' + props.condition_value[ year ] + percentSuffix);
                allLayers[layer].setStyle({fillColor: getColor(props.condition_value[year])});
            }
        }

        var start_year = #{@current_dataset.start_year};
        var end_year = #{@current_dataset.end_year};

        $('#start_year').html(start_year);
        $('#end_year').html(end_year);

        if(start_year == end_year){
          // only one year in system - remove slider
          $("#slider, #start_year, #end_year").css({
            display: "none"
          });
        }

        var active_year = end_year;
        if ($.address.parameter('year') != null)
            active_year = $.address.parameter('year');

        update_year(active_year);

        $("#slider").slider({
          min: start_year,
          max: end_year,
          step: 1,
          value: active_year,
          slide: function(event, ui){
            update_year(ui.value);
          },
          change: function(event, ui){
            update_year(ui.value);
          },
          range: "min"
        });

        var legend = L.control({position: 'topright'});

        legend.onAdd = function (map) {

            var div = L.DomUtil.create('div', 'info legend'),
                grades = jenks_cutoffs,
                labels = [],
                from, to;

            for (var i = 0; i < grades.length; i++) {
                from = grades[i];
                to = grades[i + 1];

                labels.push(
                    '<i style="background:' + getColor(from + 0.01) + '"></i> ' +
                    from + (to ? '&ndash;' + to : '+'));
            }

            div.innerHTML = "<strong>#{@current_dataset.name}</strong><br>" + labels.join('<br>');
            return div;
        };

        legend.addTo(map);

        $.address.externalChange(function(event) {
            update_year($.address.parameter('year'));
            $('#slider').slider('value', $.address.parameter('year'));
        });

.row-fluid
  .span4
    - if @landing
      - title 'Browse by neighborhood'
      %h3 
        Browse by neighborhood
      %p
        Choose any condition on the left to see data on the map. 
        Examples: <a href='/map/births_birth_rate'>birth rate</a>, <a href='/map/crime_aggravated_assault'>aggravated battery</a>, or <a href='/map/infectious_disease_tuberculosis'>tuberculosis</a>.
      
    - else
      - title @current_dataset.name
      %h3
        #{@current_dataset.name}
      %p #{@current_dataset.description}
      %h4 
        Year
        %small#year_label
    
      %div{ :id => "slider" }
      %strong.pull-left#start_year
      %strong.pull-right#end_year

    %hr

    #view_accordion.accordion
      - @categories.each do |c|
        .accordion-group
          .accordion-heading
            %a.accordion-toggle{"data-parent" => "#view_accordion", "data-toggle" => "collapse", :href => "#category_#{c.id}", "data-view" => c.name}
              = c.name
          .accordion-body.collapse{:id => "category_#{c.id}", :class => (not @current_category.nil? and @current_category.id == c.id) ? 'in' : ''}
            .accordion-inner{:id => "category_inner_#{c.id}"}
              %ul
                - Dataset.where(:category_id => c.id).order("name").each do |d|
                  %li
                    - if d.slug == params[:dataset_slug]
                      %strong
                        = d.name
                    - else
                      %a{:href => "/map/#{d.slug}"} 
                        = d.name

  .span8
    #map
